interface ContentCreationResult {
  research_summary: string;
  image_prompt: string;
  story_prompt: string;
  generated_image?: string;
  generated_story: string;
  metadata: {
    workflow_id: string;
    timestamp: string;
    execution_time_seconds: number;
    status: string;
  };
}

export function generateMarkdown(result: ContentCreationResult): string {
  const timestamp = new Date(result.metadata.timestamp).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });

  const markdown = `# Content Creation Result

**Generated on:** ${timestamp}  
**Workflow ID:** ${result.metadata.workflow_id}  
**Execution Time:** ${result.metadata.execution_time_seconds.toFixed(2)} seconds  
**Status:** ${result.metadata.status}

---

## Research Summary

${result.research_summary}

---

## Generated Content

### Image Prompt
> ${result.image_prompt}

### Generated Image
${formatImageSection(result.generated_image)}

### Story Prompt
> ${result.story_prompt}

### Generated Story

${result.generated_story}

---

*Generated by Content Creation Workflow*`;

  return markdown;
}

function formatImageSection(imageData?: string): string {
  if (!imageData) {
    return "*[Image generation failed or not available]*";
  }

  // Check if it's a URL (starts with http)
  if (imageData.startsWith('http')) {
    return `![Generated Image](${imageData})`;
  }

  // Check if it's a local path (relative or absolute)
  if (imageData.includes('.png') || imageData.includes('.jpg') || imageData.includes('.jpeg') || imageData.includes('.webp')) {
    return `![Generated Image](${imageData})

*Image saved locally: ${imageData}*`;
  }

  // If it's just a description (fallback when image generation returns text instead of URL)
  if (imageData.startsWith("Here is") || imageData.length > 100) {
    return `*[Image generation returned description instead of URL]*

> ${imageData}

*Note: The image generation tool should return a URL, but returned a description instead.*`;
  }

  // Default case
  return `*[Image data available]*

${imageData}`;
}

export function generatePlaceholderMarkdown(prompt: string): string {
  return `# Content Creation in Progress

**Prompt:** ${prompt}

---

## Status
🔄 **Processing your request...**

The AI agents are working on:
1. 🔍 Researching relevant information
2. 🎨 Generating optimized prompts
3. 🖼️ Creating visual content
4. 📝 Writing your story

---

*Please wait while we create your content...*`;
}